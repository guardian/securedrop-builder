#!/usr/bin/env python3
"""
Promote a suite of packages to the prod repository

This expects you have a directory layout like the following:
.
├── securedrop-builder (this repository)
├── securedrop-apt-test (contains packages to promote)
└── securedrop-apt-prod (where packages should be promoted to)

Example:
    ./promote-suite workstation/bullseye

"""
import argparse
import functools
import shutil
import subprocess
from collections import defaultdict
from pathlib import Path
from typing import Tuple

from debian import debfile

BUILDER = Path(__name__).absolute().parent
DEV_LFS = BUILDER.parent / 'securedrop-apt-test'
PROD_LFS = BUILDER.parent / 'securedrop-apt-prod'


def sort_versions(one: Tuple[str, Path], two: Tuple[str, Path]):
    """sort two Debian package versions"""
    status = subprocess.run(['dpkg', '--compare-versions', one[0], 'lt', two[0]])
    if status.returncode == 1:
        # false, two is bigger
        return 1
    else:
        # true, one is bigger
        return -1


def fix_name(name: str) -> str:
    """
    Linux packages embed the version in the name, so we'd never have multiple
    packages meet the deletion threshold. Silly string manipulation to drop
    the version.
    E.g. "linux-image-5.15.26-grsec-securedrop" -> "linux-image-securedrop"
    """
    if name.endswith(('-securedrop', '-workstation')):
        suffix = name.split('-')[-1]
    else:
        return name
    if name.startswith('linux-image-'):
        return f'linux-image-{suffix}'
    elif name.startswith('linux-headers-'):
        return f'linux-headers-{suffix}'
    return name


def suite_info(path: Path):
    # Get the latest package + version for each package in the suite
    ret = {}
    data = defaultdict(dict)
    for deb in path.glob('*.deb'):
        control = debfile.DebFile(deb).control.debcontrol()
        name = fix_name(control['Package'])
        if 'rc' in control['Version']:
            # We never want to promote rc packages
            continue
        data[name][control['Version']] = deb

    for name, versions in data.items():
        items = sorted(versions.items(), key=functools.cmp_to_key(sort_versions), reverse=True)
        ret[name] = items[0][1]

    return ret


def main():
    parser = argparse.ArgumentParser(
        description="Cleans up old packages"
    )
    parser.add_argument(
        "suite",
        help="Suite to promote",
    )
    args = parser.parse_args()
    dev_folder = DEV_LFS / args.suite
    prod_folder = PROD_LFS / args.suite
    for folder in [dev_folder, prod_folder]:
        if not folder.is_dir():
            raise RuntimeError(f"Directory {folder}, doesn't exist")

    dev_suite = suite_info(dev_folder)
    prod_suite = suite_info(prod_folder)
    to_promote = []
    for name, dev_path in dev_suite.items():
        try:
            prod_path = prod_suite[name]
            # XXX: for simplicity we use a simple equality check, assuming
            # it's unlikely for the dev repo to be behind the prod repo.
            if dev_path.name != prod_path.name:
                to_promote.append(dev_path)
        except KeyError:
            # Not in prod repo yet
            to_promote.append(dev_path)

    for dev_path in sorted(to_promote):
        print(f'Promoting {dev_path.name}')
        prod_path = prod_folder / dev_path.name
        shutil.copy2(dev_path, prod_path)


if __name__ == '__main__':
    main()
